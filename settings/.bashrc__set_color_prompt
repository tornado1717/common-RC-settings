# .bashrc

###############################################################################
# Notes & Docs
########################################
# Color codes:
#	30+1 red
#	30+2 green
#	30+4 blue
#	30+7 white
#	background = current color +10
#	bright = current color +60
#
# Other text params:
#	1 = highlight/bold (same as "bright" for many terminals)
#	2 = dim (works sometimes)
#	4 = underline
#	5 = blink
########################################
# set the prompt stuff:
#	http://tldp.org/HOWTO/Bash-Prompt-HOWTO/
#		http://tldp.org/HOWTO/Bash-Prompt-HOWTO/bash-prompt-escape-sequences.html
#		http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
#	Newer version at:
#		http://www.gilesorr.com/bashprompt/
#			http://www.gilesorr.com/bashprompt/howto/
#	Note:
#		In a bash prompt, a pair of escaped brackets ("\[" and "\]") is needed around non-printed characters so that bash can accurately calculate the prompts length
###############################################################################


###############################################################################
# Default Prompts from Various Systems
###############################################################################

	# Some defaults I've seen:
#PS1="[\u@\h \W]\$"
#PS1="\h{\!}$"
#PS1='\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n\$ '  # default for Cygwin

# Bash defaults (according to Mac + bash 3.2):
#PS1="\s-\v\$ "
#PS2="> "
#PS3=???
#PS4="+ "  # The 1st char is duplicated multiple times to indicate layers of indirection


###############################################################################
# My Custom Prompts
###############################################################################

########################################
# Colors Definitions
########################################

if [[ -n $my_bashrc__bright_color_supported ]]; then
	ucol="\[\033[00;91m\]" #"\[\033[91;40m\]"  # user color
	wcol="\[\033[00;92m\]" #"\[\033[92;40m\]"  # working dir color
	hcol="\[\033[00;93m\]" #"\[\033[93;40m\]"  # host dir color
	ncol="\[\033[00;94m\]" #"\[\033[94;40m\]"  # command # or clearcase VOB # dir color
	#ocol="\[\033[30;47m\]"  # color for other stuff
	ocol="\[\033[0m\]" #"\[\033[00;97m\]" #"\[\033[37;40m\]"  # color for other stuff
	eccol="\[\033[00;91;41m\]"  # color for error codes returned in previous commands. Apparently the escaped [] chars aren't needed since this is only used from within a subcommand
else
	ucol="\[\033[00;1;31m\]"  # user color
	wcol="\[\033[00;1;32m\]"  # working dir color
	hcol="\[\033[00;1;33m\]"  # host dir color
	ncol="\[\033[00;1;34m\]"  # command # or clearcase VOB # dir color
	ocol="\[\033[0m\]" #"\[\033[00;97m\]" #"\[\033[37;40m\]"  # color for other stuff
	eccol="\[\033[00;30;41m\]" #color for error codes returned in previous commands
fi
resetcol="\[\033[0m\]" #"\033[0m"  # reset colors to default


########################################
# Working Directory Definition(s)
########################################

	# "Default" / builtin method:
	# '\w' for full working dir path, '\W' for short path
if
	#[[ `bash --version` == "*version [^0-3]*" ]]  # Doesn't quite work
	#[[ `bash --version | grep "bash" | cut -f 4 -d " " | cut -d "-" -f 1  | cut -d "(" -f 1` == [^0-3]* ]]  # Works - see http://stackoverflow.com/questions/9450604/how-to-get-bash-version-number
	#[[ $BASH_VERSION == [^0-3]* ]]  # Works better - see http://stackoverflow.com/questions/9450604/how-to-get-bash-version-number
	[[ $BASH_VERSINFO > 3 ]]  # Works better still
then
	# PROMPT_DIRTRIM wasn't introduced until Bash v4.x.x
		#echo ">3"
	current_directory="\w"
	PROMPT_DIRTRIM=2  # "If set to a number greater than zero, the value is used as the number of trailing directory components to retain when expanding the \w and \W prompt string escapes (see PROMPTING below).  Characters removed are replaced with an ellipsis."
else
		#echo "<=3"
	current_directory="\W"
fi

	# Modified from Carter Cooper:
	# Works, but only seems to be run when prompt is 1st set and never again so it's useless
	#	I think the 1 time set might be a Mac + bash 3.2 specific bug
#max_length_path() {  # 1st Param is the path, 2nd is the max length
#	local PRE= NAME="$1" LENGTH="$2";
#	[[ "$NAME" != "${NAME#$HOME/}" || -z "${NAME#$HOME}" ]] &&
#		PRE+='~' NAME="${NAME#$HOME}" LENGTH=$[LENGTH-1];
#	((${#NAME}>$LENGTH)) && NAME="/...${NAME:$[${#NAME}-LENGTH+4]}";
#	echo "$PRE$NAME"
#}
#current_directory="$(max_length_path $(pwd) 35)"

	# Modified from http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html
	# "For your first question, you want to look at the PROMPT_COMMAND variable. I don't have an answer for your second question."
	# Works, but only seems to be run when prompt is 1st set and never again so it's useless
	#	I think the 1 time set might be a Mac + bash 3.2 specific bug
		# This will limit the path to 30 characters.
		#PROMPT_COMMAND='if [ ${#PWD} -gt 30 ]; then myPWD=${PWD:0:12}...${PWD:${#PWD}-15}; else myPWD=$PWD; fi'
		#PS1="\u@\h \$myPWD\$ "
#PROMPT_COMMAND='if [ ${#PWD} -gt 30 ]; then current_directory=${PWD:0:12}...${PWD:${#PWD}-15}; else current_directory=$PWD; fi'
#PROMPT_COMMAND='if [ ${#PWD} -gt 10 ]; then current_directory=${PWD:0:3}...${PWD:${#PWD}-4}; else current_directory=$PWD; fi'


########################################
# Window Title
########################################

update_window_title=""
#update_window_title="\[\e]0;\w\a\]"  # Updates the window's title to be the current directory (used by Cygwin and ???) (Note: \e is the same as \033)


########################################
# Return Code from Previous Command
########################################

# From http://stackoverflow.com/questions/3746/whats-in-your-bashrc
#		Postfix prompt with the previous command's return code if failure. Maintains the $? variable so you can use it in other conditionals.
#	PS1='`_ret=$?; if test $_ret -ne 0; then echo "$_ret:"; set ?=$_ret; unset _ret; fi`\u@\h:\W\$ '
#		This seems to be giving me problems with line wrapping in SecureCRT
previous_cmd_ret_code='`_ret=$?; if test $_ret -ne 0; then echo ":$_ret"; set ?=$_ret; unset _ret; fi`'
#previous_cmd_ret_code=""


########################################
# Final Definitions
########################################

	# Notes:
	#	\D{...}
	#		%T = "The time in 24-hour notation (%H:%M:%S). (SU)"
	#		%F = "Equivalent to %Y-%m-%d (the ISO 8601 date format). (C99)"
PS1="${resetcol}${update_window_title}${ucol}\u${ocol}@${hcol}\h${ocol}{${ncol}\!${ocol}:${ncol}\D{%F %T}${ocol}}:${wcol}${current_directory}${eccol}${previous_cmd_ret_code}${ocol}>${resetcol}"  # looks good
	#PS1="${resetcol}${update_window_title}${ucol}\u${ocol}@${hcol}\h${ocol}{${ncol}\!${ocol}:${ncol}\D{%F %T}${ocol}}:${wcol}${current_directory}${eccol}${previous_cmd_ret_code}${ocol}${resetcol}$ "  # Modified to work with certain scripts that expect the prompt to end with "$ "
		#PS1="${resetcol}\n${wcol}\$${resetcol} "  # email friendly prompt
PS2="${resetcol}${hcol}>${resetcol} "
#PS3="${resetcol}${hcol}>${resetcol} "
PS4="${resetcol}${ucol}+${resetcol} "


########################################
# Postfix the output of each command with something
########################################

# TODO: Supposedly setting PROMPT_COMMAND works but it seems to actually run its command as a postfix instead of a prefix
# Note: Apparently this is actually SUPPOSED to prefix the PS1 output, not the command's output.  At that point, it's the same as $PS1 except it doesn't use the formatting control chars (like "\u" for username) and might be more scriptable
#PROMPT_COMMAND="date; $PROMPT_COMMAND"
